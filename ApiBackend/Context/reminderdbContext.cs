// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ApiBackend.Models;
using Microsoft.EntityFrameworkCore;

namespace ApiBackend.Context;

public partial class ReminderdbContext : DbContext
{
    public ReminderdbContext(DbContextOptions<ReminderdbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Reminders> Reminders { get; set; }

    public virtual DbSet<SharedReminders> SharedReminders { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Reminders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("reminders_pkey");

            entity.ToTable("reminders");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ReminderType).HasColumnName("reminder_type");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Title).HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<SharedReminders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("shared_reminders_pkey");

            entity.ToTable("shared_reminders");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.ReminderId).HasColumnName("reminder_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("users_pkey");

            entity.ToTable("users");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Password).HasColumnName("password");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}